/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from "restful-react";
export const SPEC_VERSION = "0.1.0";
export interface Deployment {
  id: string;
  organization: string;
  tlsAuthority: string;
  name: string;
  hostname: string;
  state: "DQ" | "D" | "Q" | "U" | "R" | "E";
  clusterId: string;
  mzVersion?: string | null;
  pendingMigration: PendingMigration | null;
  orchestratorDeployment: OrchestratorDeployment;
}

export interface DeploymentRequest {
  mzVersion?: string | null;
}

export interface OrchestratorDeployment {
  status: string;
}

export interface OrchestratorDeploymentRequest {
  status: string;
}

export interface PatchedDeploymentRequest {
  mzVersion?: string | null;
}

export interface PendingMigration {
  description: string;
  deadline: string;
}

export interface PendingMigrationRequest {
  description: string;
  deadline: string;
}

export interface User {
  /**
   * The unique ID assigned to this user by AWS Cognito.
   */
  cognitoSub: string;
  name: string;
  email: string;
}

export interface AllowedEmailsRetrievePathParams {
  email: string;
}

export type AllowedEmailsRetrieveProps = Omit<
  GetProps<boolean, unknown, void, AllowedEmailsRetrievePathParams>,
  "path"
> &
  AllowedEmailsRetrievePathParams;

/**
 * Reports whether the specified email address is allowed to sign up for
 * Materialize Cloud.
 */
export const AllowedEmailsRetrieve = ({
  email,
  ...props
}: AllowedEmailsRetrieveProps) => (
  <Get<boolean, unknown, void, AllowedEmailsRetrievePathParams>
    path={`/api/allowed-emails/${email}`}
    {...props}
  />
);

export type UseAllowedEmailsRetrieveProps = Omit<
  UseGetProps<boolean, unknown, void, AllowedEmailsRetrievePathParams>,
  "path"
> &
  AllowedEmailsRetrievePathParams;

/**
 * Reports whether the specified email address is allowed to sign up for
 * Materialize Cloud.
 */
export const useAllowedEmailsRetrieve = ({
  email,
  ...props
}: UseAllowedEmailsRetrieveProps) =>
  useGet<boolean, unknown, void, AllowedEmailsRetrievePathParams>(
    (paramsInPath: AllowedEmailsRetrievePathParams) =>
      `/api/allowed-emails/${paramsInPath.email}`,
    { pathParams: { email }, ...props }
  );

export type DeploymentsListProps = Omit<
  GetProps<Deployment[], unknown, void, void>,
  "path"
>;

export const DeploymentsList = (props: DeploymentsListProps) => (
  <Get<Deployment[], unknown, void, void>
    path={`/api/deployments`}
    {...props}
  />
);

export type UseDeploymentsListProps = Omit<
  UseGetProps<Deployment[], unknown, void, void>,
  "path"
>;

export const useDeploymentsList = (props: UseDeploymentsListProps) =>
  useGet<Deployment[], unknown, void, void>(`/api/deployments`, props);

export type DeploymentsCreateProps = Omit<
  MutateProps<Deployment, unknown, void, DeploymentRequest, void>,
  "path" | "verb"
>;

export const DeploymentsCreate = (props: DeploymentsCreateProps) => (
  <Mutate<Deployment, unknown, void, DeploymentRequest, void>
    verb="POST"
    path={`/api/deployments`}
    {...props}
  />
);

export type UseDeploymentsCreateProps = Omit<
  UseMutateProps<Deployment, unknown, void, DeploymentRequest, void>,
  "path" | "verb"
>;

export const useDeploymentsCreate = (props: UseDeploymentsCreateProps) =>
  useMutate<Deployment, unknown, void, DeploymentRequest, void>(
    "POST",
    `/api/deployments`,
    props
  );

export interface DeploymentsRetrievePathParams {
  id: string;
}

export type DeploymentsRetrieveProps = Omit<
  GetProps<Deployment, unknown, void, DeploymentsRetrievePathParams>,
  "path"
> &
  DeploymentsRetrievePathParams;

export const DeploymentsRetrieve = ({
  id,
  ...props
}: DeploymentsRetrieveProps) => (
  <Get<Deployment, unknown, void, DeploymentsRetrievePathParams>
    path={`/api/deployments/${id}`}
    {...props}
  />
);

export type UseDeploymentsRetrieveProps = Omit<
  UseGetProps<Deployment, unknown, void, DeploymentsRetrievePathParams>,
  "path"
> &
  DeploymentsRetrievePathParams;

export const useDeploymentsRetrieve = ({
  id,
  ...props
}: UseDeploymentsRetrieveProps) =>
  useGet<Deployment, unknown, void, DeploymentsRetrievePathParams>(
    (paramsInPath: DeploymentsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsUpdatePathParams {
  id: string;
}

export type DeploymentsUpdateProps = Omit<
  MutateProps<
    Deployment,
    unknown,
    void,
    DeploymentRequest,
    DeploymentsUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsUpdatePathParams;

export const DeploymentsUpdate = ({ id, ...props }: DeploymentsUpdateProps) => (
  <Mutate<
    Deployment,
    unknown,
    void,
    DeploymentRequest,
    DeploymentsUpdatePathParams
  >
    verb="PUT"
    path={`/api/deployments/${id}`}
    {...props}
  />
);

export type UseDeploymentsUpdateProps = Omit<
  UseMutateProps<
    Deployment,
    unknown,
    void,
    DeploymentRequest,
    DeploymentsUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsUpdatePathParams;

export const useDeploymentsUpdate = ({
  id,
  ...props
}: UseDeploymentsUpdateProps) =>
  useMutate<
    Deployment,
    unknown,
    void,
    DeploymentRequest,
    DeploymentsUpdatePathParams
  >(
    "PUT",
    (paramsInPath: DeploymentsUpdatePathParams) =>
      `/api/deployments/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsPartialUpdatePathParams {
  id: string;
}

export type DeploymentsPartialUpdateProps = Omit<
  MutateProps<
    Deployment,
    unknown,
    void,
    PatchedDeploymentRequest,
    DeploymentsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsPartialUpdatePathParams;

export const DeploymentsPartialUpdate = ({
  id,
  ...props
}: DeploymentsPartialUpdateProps) => (
  <Mutate<
    Deployment,
    unknown,
    void,
    PatchedDeploymentRequest,
    DeploymentsPartialUpdatePathParams
  >
    verb="PATCH"
    path={`/api/deployments/${id}`}
    {...props}
  />
);

export type UseDeploymentsPartialUpdateProps = Omit<
  UseMutateProps<
    Deployment,
    unknown,
    void,
    PatchedDeploymentRequest,
    DeploymentsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsPartialUpdatePathParams;

export const useDeploymentsPartialUpdate = ({
  id,
  ...props
}: UseDeploymentsPartialUpdateProps) =>
  useMutate<
    Deployment,
    unknown,
    void,
    PatchedDeploymentRequest,
    DeploymentsPartialUpdatePathParams
  >(
    "PATCH",
    (paramsInPath: DeploymentsPartialUpdatePathParams) =>
      `/api/deployments/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export type DeploymentsDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

export const DeploymentsDestroy = (props: DeploymentsDestroyProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path={`/api/deployments`}
    {...props}
  />
);

export type UseDeploymentsDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

export const useDeploymentsDestroy = (props: UseDeploymentsDestroyProps) =>
  useMutate<void, unknown, void, string, void>("DELETE", `/api/deployments`, {
    ...props,
  });

export interface DeploymentsCertsRetrievePathParams {
  id: string;
}

export type DeploymentsCertsRetrieveProps = Omit<
  GetProps<string, unknown, void, DeploymentsCertsRetrievePathParams>,
  "path"
> &
  DeploymentsCertsRetrievePathParams;

export const DeploymentsCertsRetrieve = ({
  id,
  ...props
}: DeploymentsCertsRetrieveProps) => (
  <Get<string, unknown, void, DeploymentsCertsRetrievePathParams>
    path={`/api/deployments/${id}/certs`}
    {...props}
  />
);

export type UseDeploymentsCertsRetrieveProps = Omit<
  UseGetProps<string, unknown, void, DeploymentsCertsRetrievePathParams>,
  "path"
> &
  DeploymentsCertsRetrievePathParams;

export const useDeploymentsCertsRetrieve = ({
  id,
  ...props
}: UseDeploymentsCertsRetrieveProps) =>
  useGet<string, unknown, void, DeploymentsCertsRetrievePathParams>(
    (paramsInPath: DeploymentsCertsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/certs`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsLogsRetrievePathParams {
  id: string;
}

export type DeploymentsLogsRetrieveProps = Omit<
  GetProps<string, unknown, void, DeploymentsLogsRetrievePathParams>,
  "path"
> &
  DeploymentsLogsRetrievePathParams;

export const DeploymentsLogsRetrieve = ({
  id,
  ...props
}: DeploymentsLogsRetrieveProps) => (
  <Get<string, unknown, void, DeploymentsLogsRetrievePathParams>
    path={`/api/deployments/${id}/logs`}
    {...props}
  />
);

export type UseDeploymentsLogsRetrieveProps = Omit<
  UseGetProps<string, unknown, void, DeploymentsLogsRetrievePathParams>,
  "path"
> &
  DeploymentsLogsRetrievePathParams;

export const useDeploymentsLogsRetrieve = ({
  id,
  ...props
}: UseDeploymentsLogsRetrieveProps) =>
  useGet<string, unknown, void, DeploymentsLogsRetrievePathParams>(
    (paramsInPath: DeploymentsLogsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/logs`,
    { pathParams: { id }, ...props }
  );

export type HealthRetrieveProps = Omit<
  GetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const HealthRetrieve = (props: HealthRetrieveProps) => (
  <Get<void, unknown, void, void> path={`/api/health`} {...props} />
);

export type UseHealthRetrieveProps = Omit<
  UseGetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const useHealthRetrieve = (props: UseHealthRetrieveProps) =>
  useGet<void, unknown, void, void>(`/api/health`, props);

export type MzVersionsListProps = Omit<
  GetProps<string[], unknown, void, void>,
  "path"
>;

export const MzVersionsList = (props: MzVersionsListProps) => (
  <Get<string[], unknown, void, void> path={`/api/mz-versions`} {...props} />
);

export type UseMzVersionsListProps = Omit<
  UseGetProps<string[], unknown, void, void>,
  "path"
>;

export const useMzVersionsList = (props: UseMzVersionsListProps) =>
  useGet<string[], unknown, void, void>(`/api/mz-versions`, props);

export interface SchemaRetrieveResponse {
  [key: string]: any;
}

export interface SchemaRetrieveQueryParams {
  format?: "json" | "yaml";
}

export type SchemaRetrieveProps = Omit<
  GetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const SchemaRetrieve = (props: SchemaRetrieveProps) => (
  <Get<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>
    path={`/api/schema`}
    {...props}
  />
);

export type UseSchemaRetrieveProps = Omit<
  UseGetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = (props: UseSchemaRetrieveProps) =>
  useGet<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>(
    `/api/schema`,
    props
  );

export type UserRetrieveProps = Omit<
  GetProps<User, unknown, void, void>,
  "path"
>;

export const UserRetrieve = (props: UserRetrieveProps) => (
  <Get<User, unknown, void, void> path={`/api/user`} {...props} />
);

export type UseUserRetrieveProps = Omit<
  UseGetProps<User, unknown, void, void>,
  "path"
>;

export const useUserRetrieve = (props: UseUserRetrieveProps) =>
  useGet<User, unknown, void, void>(`/api/user`, props);
