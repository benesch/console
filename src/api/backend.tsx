/* Generated by restful-react */

import React from "react";
import {
  Get,
  GetProps,
  Mutate,
  MutateProps,
  useGet,
  UseGetProps,
  useMutate,
  UseMutateProps,
} from "restful-react";
export const SPEC_VERSION = "0.1.0";
export interface Deployment {
  id: string;
  organization: string;
  tlsAuthority: string | null;
  name: string;
  hostname: string | null;
  port: number;
  flaggedForDeletion: boolean;
  flaggedForUpdate: boolean;
  catalogRestoreMode: boolean;
  size: DeploymentSizeEnum;
  storageMb: number;
  disableUserIndexes: boolean;
  materializedExtraArgs: string[];
  clusterId: string | null;
  mzVersion: string;
  releaseTrack: ReleaseTrackEnum;
  status: string;
  enableTailscale: boolean;
  cloudProviderRegion: SupportedCloudRegion;
}

export interface DeploymentRequest {
  name?: string;
  catalogRestoreMode?: boolean;
  size?: DeploymentSizeEnum;
  storageMb?: number;
  disableUserIndexes?: boolean;
  materializedExtraArgs?: string[];
  mzVersion?: string;
  releaseTrack?: ReleaseTrackEnum;
  enableTailscale?: boolean;
  tailscaleAuthKey?: string;
  cloudProviderRegion: SupportedCloudRegionRequest;
  skipMtlsAuth?: boolean;
}

export type DeploymentSizeEnum = "XS" | "S" | "M" | "L" | "XL";

export interface HistoricalDeploymentChange {
  name?: ModifiedString;
  hostname?: ModifiedString;
  flaggedForDeletion?: ModifiedBoolean;
  flaggedForUpdate?: ModifiedBoolean;
  catalogRestoreMode?: ModifiedBoolean;
  size?: ModifiedSize;
  disableUserIndexes?: ModifiedBoolean;
  materializedExtraArgs?: ModifiedStringList;
  clusterId?: ModifiedString;
  mzVersion?: ModifiedString;
  enableTailscale?: ModifiedBoolean;
}

export interface HistoricalDeploymentDelta {
  changes: HistoricalDeploymentChange;
  metadata: HistoricalDeploymentMetadata;
}

export interface HistoricalDeploymentMetadata {
  date: string;
  user: string;
  operation: OperationEnum;
}

export interface ModifiedBoolean {
  old: boolean | null;
  new: boolean | null;
}

export interface ModifiedSize {
  old: DeploymentSizeEnum;
  new: DeploymentSizeEnum;
}

export interface ModifiedString {
  old: string | null;
  new: string | null;
}

export interface ModifiedStringList {
  old: string | null[];
  new: string | null[];
}

export type OperationEnum = "CREATE" | "UPDATE" | "DELETE";

export interface Organization {
  id: string;
  deploymentLimit: number;
  /**
   * When this organization's trial period expires. If empty, the organization is on an enterprise plan.
   */
  trialExpiresAt: string | null;
}

export interface PatchedDeploymentUpdateRequest {
  name?: string;
  catalogRestoreMode?: boolean;
  size?: DeploymentSizeEnum;
  storageMb?: number;
  disableUserIndexes?: boolean;
  materializedExtraArgs?: string[];
  mzVersion?: string;
  releaseTrack?: ReleaseTrackEnum;
  enableTailscale?: boolean;
  tailscaleAuthKey?: string;
  skipMtlsAuth?: boolean;
}

export interface PrometheusMetric {
  name: string;
  values: string[][];
}

/**
 * Serializer for the prometheus metrics.
 */
export interface PrometheusMetrics {
  metrics: PrometheusMetric[];
}

export type ProviderEnum = "AWS" | "local";

export type ReleaseTrackEnum = "canary" | "stable";

export interface SupportedCloudRegion {
  provider: ProviderEnum;
  region: string;
  regionControllerUrl: string;
}

export interface SupportedCloudRegionRequest {
  provider: ProviderEnum;
  region: string;
}

export type CloudProvidersListProps = Omit<
  GetProps<SupportedCloudRegion[], unknown, void, void>,
  "path"
>;

/**
 * List the cloud provider and regions
 */
export const CloudProvidersList = (props: CloudProvidersListProps) => (
  <Get<SupportedCloudRegion[], unknown, void, void>
    path="/api/cloud-providers"
    {...props}
  />
);

export type UseCloudProvidersListProps = Omit<
  UseGetProps<SupportedCloudRegion[], unknown, void, void>,
  "path"
>;

/**
 * List the cloud provider and regions
 */
export const useCloudProvidersList = (props: UseCloudProvidersListProps) =>
  useGet<SupportedCloudRegion[], unknown, void, void>(
    `/api/cloud-providers`,
    props
  );

export type DeploymentsListProps = Omit<
  GetProps<Deployment[], unknown, void, void>,
  "path"
>;

/**
 * List the available deployments.
 */
export const DeploymentsList = (props: DeploymentsListProps) => (
  <Get<Deployment[], unknown, void, void> path="/api/deployments" {...props} />
);

export type UseDeploymentsListProps = Omit<
  UseGetProps<Deployment[], unknown, void, void>,
  "path"
>;

/**
 * List the available deployments.
 */
export const useDeploymentsList = (props: UseDeploymentsListProps) =>
  useGet<Deployment[], unknown, void, void>(`/api/deployments`, props);

export type DeploymentsCreateProps = Omit<
  MutateProps<Deployment, unknown, void, DeploymentRequest, void>,
  "path" | "verb"
>;

/**
 * Create a new deployment.
 */
export const DeploymentsCreate = (props: DeploymentsCreateProps) => (
  <Mutate<Deployment, unknown, void, DeploymentRequest, void>
    verb="POST"
    path="/api/deployments"
    {...props}
  />
);

export type UseDeploymentsCreateProps = Omit<
  UseMutateProps<Deployment, unknown, void, DeploymentRequest, void>,
  "path" | "verb"
>;

/**
 * Create a new deployment.
 */
export const useDeploymentsCreate = (props: UseDeploymentsCreateProps) =>
  useMutate<Deployment, unknown, void, DeploymentRequest, void>(
    "POST",
    `/api/deployments`,
    props
  );

export interface DeploymentsRetrievePathParams {
  id: string;
}

export type DeploymentsRetrieveProps = Omit<
  GetProps<Deployment, unknown, void, DeploymentsRetrievePathParams>,
  "path"
> &
  DeploymentsRetrievePathParams;

/**
 * Fetch details about a single deployment.
 */
export const DeploymentsRetrieve = ({
  id,
  ...props
}: DeploymentsRetrieveProps) => (
  <Get<Deployment, unknown, void, DeploymentsRetrievePathParams>
    path={`/api/deployments/${id}`}
    {...props}
  />
);

export type UseDeploymentsRetrieveProps = Omit<
  UseGetProps<Deployment, unknown, void, DeploymentsRetrievePathParams>,
  "path"
> &
  DeploymentsRetrievePathParams;

/**
 * Fetch details about a single deployment.
 */
export const useDeploymentsRetrieve = ({
  id,
  ...props
}: UseDeploymentsRetrieveProps) =>
  useGet<Deployment, unknown, void, DeploymentsRetrievePathParams>(
    (paramsInPath: DeploymentsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsPartialUpdatePathParams {
  id: string;
}

export type DeploymentsPartialUpdateProps = Omit<
  MutateProps<
    Deployment,
    unknown,
    void,
    PatchedDeploymentUpdateRequest,
    DeploymentsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsPartialUpdatePathParams;

/**
 * Partially update a deployment.
 */
export const DeploymentsPartialUpdate = ({
  id,
  ...props
}: DeploymentsPartialUpdateProps) => (
  <Mutate<
    Deployment,
    unknown,
    void,
    PatchedDeploymentUpdateRequest,
    DeploymentsPartialUpdatePathParams
  >
    verb="PATCH"
    path={`/api/deployments/${id}`}
    {...props}
  />
);

export type UseDeploymentsPartialUpdateProps = Omit<
  UseMutateProps<
    Deployment,
    unknown,
    void,
    PatchedDeploymentUpdateRequest,
    DeploymentsPartialUpdatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsPartialUpdatePathParams;

/**
 * Partially update a deployment.
 */
export const useDeploymentsPartialUpdate = ({
  id,
  ...props
}: UseDeploymentsPartialUpdateProps) =>
  useMutate<
    Deployment,
    unknown,
    void,
    PatchedDeploymentUpdateRequest,
    DeploymentsPartialUpdatePathParams
  >(
    "PATCH",
    (paramsInPath: DeploymentsPartialUpdatePathParams) =>
      `/api/deployments/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export type DeploymentsDestroyProps = Omit<
  MutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * Destroy a deployment.
 */
export const DeploymentsDestroy = (props: DeploymentsDestroyProps) => (
  <Mutate<void, unknown, void, string, void>
    verb="DELETE"
    path="/api/deployments"
    {...props}
  />
);

export type UseDeploymentsDestroyProps = Omit<
  UseMutateProps<void, unknown, void, string, void>,
  "path" | "verb"
>;

/**
 * Destroy a deployment.
 */
export const useDeploymentsDestroy = (props: UseDeploymentsDestroyProps) =>
  useMutate<void, unknown, void, string, void>("DELETE", `/api/deployments`, {
    ...props,
  });

export interface DeploymentsCertsRetrievePathParams {
  id: string;
}

export type DeploymentsCertsRetrieveProps = Omit<
  GetProps<string, unknown, void, DeploymentsCertsRetrievePathParams>,
  "path"
> &
  DeploymentsCertsRetrievePathParams;

/**
 * Retrieve a TLS certificate bundle for a deployment.
 *
 * The TLS certificate bundle is a ZIP file containing PEM and DER
 * formatted keys that permit authenticating to the deployment as the
 * `materialize` user.
 */
export const DeploymentsCertsRetrieve = ({
  id,
  ...props
}: DeploymentsCertsRetrieveProps) => (
  <Get<string, unknown, void, DeploymentsCertsRetrievePathParams>
    path={`/api/deployments/${id}/certs`}
    {...props}
  />
);

export type UseDeploymentsCertsRetrieveProps = Omit<
  UseGetProps<string, unknown, void, DeploymentsCertsRetrievePathParams>,
  "path"
> &
  DeploymentsCertsRetrievePathParams;

/**
 * Retrieve a TLS certificate bundle for a deployment.
 *
 * The TLS certificate bundle is a ZIP file containing PEM and DER
 * formatted keys that permit authenticating to the deployment as the
 * `materialize` user.
 */
export const useDeploymentsCertsRetrieve = ({
  id,
  ...props
}: UseDeploymentsCertsRetrieveProps) =>
  useGet<string, unknown, void, DeploymentsCertsRetrievePathParams>(
    (paramsInPath: DeploymentsCertsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/certs`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsChangesListPathParams {
  id: string;
}

export type DeploymentsChangesListProps = Omit<
  GetProps<
    HistoricalDeploymentDelta[],
    unknown,
    void,
    DeploymentsChangesListPathParams
  >,
  "path"
> &
  DeploymentsChangesListPathParams;

export const DeploymentsChangesList = ({
  id,
  ...props
}: DeploymentsChangesListProps) => (
  <Get<
    HistoricalDeploymentDelta[],
    unknown,
    void,
    DeploymentsChangesListPathParams
  >
    path={`/api/deployments/${id}/changes`}
    {...props}
  />
);

export type UseDeploymentsChangesListProps = Omit<
  UseGetProps<
    HistoricalDeploymentDelta[],
    unknown,
    void,
    DeploymentsChangesListPathParams
  >,
  "path"
> &
  DeploymentsChangesListPathParams;

export const useDeploymentsChangesList = ({
  id,
  ...props
}: UseDeploymentsChangesListProps) =>
  useGet<
    HistoricalDeploymentDelta[],
    unknown,
    void,
    DeploymentsChangesListPathParams
  >(
    (paramsInPath: DeploymentsChangesListPathParams) =>
      `/api/deployments/${paramsInPath.id}/changes`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsIpRetrievePathParams {
  id: string;
}

export type DeploymentsIpRetrieveProps = Omit<
  GetProps<string, unknown, void, DeploymentsIpRetrievePathParams>,
  "path"
> &
  DeploymentsIpRetrievePathParams;

export const DeploymentsIpRetrieve = ({
  id,
  ...props
}: DeploymentsIpRetrieveProps) => (
  <Get<string, unknown, void, DeploymentsIpRetrievePathParams>
    path={`/api/deployments/${id}/ip`}
    {...props}
  />
);

export type UseDeploymentsIpRetrieveProps = Omit<
  UseGetProps<string, unknown, void, DeploymentsIpRetrievePathParams>,
  "path"
> &
  DeploymentsIpRetrievePathParams;

export const useDeploymentsIpRetrieve = ({
  id,
  ...props
}: UseDeploymentsIpRetrieveProps) =>
  useGet<string, unknown, void, DeploymentsIpRetrievePathParams>(
    (paramsInPath: DeploymentsIpRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/ip`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsLogsRetrieveQueryParams {
  previous?: boolean;
}

export interface DeploymentsLogsRetrievePathParams {
  id: string;
}

export type DeploymentsLogsRetrieveProps = Omit<
  GetProps<
    string,
    unknown,
    DeploymentsLogsRetrieveQueryParams,
    DeploymentsLogsRetrievePathParams
  >,
  "path"
> &
  DeploymentsLogsRetrievePathParams;

/**
 * Retrieve the logs for a deployment.
 */
export const DeploymentsLogsRetrieve = ({
  id,
  ...props
}: DeploymentsLogsRetrieveProps) => (
  <Get<
    string,
    unknown,
    DeploymentsLogsRetrieveQueryParams,
    DeploymentsLogsRetrievePathParams
  >
    path={`/api/deployments/${id}/logs`}
    {...props}
  />
);

export type UseDeploymentsLogsRetrieveProps = Omit<
  UseGetProps<
    string,
    unknown,
    DeploymentsLogsRetrieveQueryParams,
    DeploymentsLogsRetrievePathParams
  >,
  "path"
> &
  DeploymentsLogsRetrievePathParams;

/**
 * Retrieve the logs for a deployment.
 */
export const useDeploymentsLogsRetrieve = ({
  id,
  ...props
}: UseDeploymentsLogsRetrieveProps) =>
  useGet<
    string,
    unknown,
    DeploymentsLogsRetrieveQueryParams,
    DeploymentsLogsRetrievePathParams
  >(
    (paramsInPath: DeploymentsLogsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/logs`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsMetricsCpuRetrievePathParams {
  id: string;
  period: number;
}

export type DeploymentsMetricsCpuRetrieveProps = Omit<
  GetProps<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsCpuRetrievePathParams
  >,
  "path"
> &
  DeploymentsMetricsCpuRetrievePathParams;

/**
 * Retrieve cpu line graph as a list of tuples (timestamps / utilization in %)) for a deployment.
 */
export const DeploymentsMetricsCpuRetrieve = ({
  id,
  period,
  ...props
}: DeploymentsMetricsCpuRetrieveProps) => (
  <Get<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsCpuRetrievePathParams
  >
    path={`/api/deployments/${id}/metrics/cpu/${period}`}
    {...props}
  />
);

export type UseDeploymentsMetricsCpuRetrieveProps = Omit<
  UseGetProps<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsCpuRetrievePathParams
  >,
  "path"
> &
  DeploymentsMetricsCpuRetrievePathParams;

/**
 * Retrieve cpu line graph as a list of tuples (timestamps / utilization in %)) for a deployment.
 */
export const useDeploymentsMetricsCpuRetrieve = ({
  id,
  period,
  ...props
}: UseDeploymentsMetricsCpuRetrieveProps) =>
  useGet<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsCpuRetrievePathParams
  >(
    (paramsInPath: DeploymentsMetricsCpuRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/metrics/cpu/${paramsInPath.period}`,
    { pathParams: { id, period }, ...props }
  );

export interface DeploymentsMetricsMemoryRetrievePathParams {
  id: string;
  period: number;
}

export type DeploymentsMetricsMemoryRetrieveProps = Omit<
  GetProps<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsMemoryRetrievePathParams
  >,
  "path"
> &
  DeploymentsMetricsMemoryRetrievePathParams;

/**
 * Retrieve memory line graph data (as a list of tuples (timestamps / utilization in %)) for a deployment.
 */
export const DeploymentsMetricsMemoryRetrieve = ({
  id,
  period,
  ...props
}: DeploymentsMetricsMemoryRetrieveProps) => (
  <Get<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsMemoryRetrievePathParams
  >
    path={`/api/deployments/${id}/metrics/memory/${period}`}
    {...props}
  />
);

export type UseDeploymentsMetricsMemoryRetrieveProps = Omit<
  UseGetProps<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsMemoryRetrievePathParams
  >,
  "path"
> &
  DeploymentsMetricsMemoryRetrievePathParams;

/**
 * Retrieve memory line graph data (as a list of tuples (timestamps / utilization in %)) for a deployment.
 */
export const useDeploymentsMetricsMemoryRetrieve = ({
  id,
  period,
  ...props
}: UseDeploymentsMetricsMemoryRetrieveProps) =>
  useGet<
    PrometheusMetrics,
    unknown,
    void,
    DeploymentsMetricsMemoryRetrievePathParams
  >(
    (paramsInPath: DeploymentsMetricsMemoryRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/metrics/memory/${paramsInPath.period}`,
    { pathParams: { id, period }, ...props }
  );

export interface DeploymentsSecretsListPathParams {
  id: string;
}

export type DeploymentsSecretsListProps = Omit<
  GetProps<string[], unknown, void, DeploymentsSecretsListPathParams>,
  "path"
> &
  DeploymentsSecretsListPathParams;

/**
 * List all customer defined secrets for the deployment
 */
export const DeploymentsSecretsList = ({
  id,
  ...props
}: DeploymentsSecretsListProps) => (
  <Get<string[], unknown, void, DeploymentsSecretsListPathParams>
    path={`/api/deployments/${id}/secrets`}
    {...props}
  />
);

export type UseDeploymentsSecretsListProps = Omit<
  UseGetProps<string[], unknown, void, DeploymentsSecretsListPathParams>,
  "path"
> &
  DeploymentsSecretsListPathParams;

/**
 * List all customer defined secrets for the deployment
 */
export const useDeploymentsSecretsList = ({
  id,
  ...props
}: UseDeploymentsSecretsListProps) =>
  useGet<string[], unknown, void, DeploymentsSecretsListPathParams>(
    (paramsInPath: DeploymentsSecretsListPathParams) =>
      `/api/deployments/${paramsInPath.id}/secrets`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsSecretsCreatePathParams {
  id: string;
  secret: string;
}

export type DeploymentsSecretsCreateProps = Omit<
  MutateProps<void, unknown, void, string, DeploymentsSecretsCreatePathParams>,
  "path" | "verb"
> &
  DeploymentsSecretsCreatePathParams;

/**
 * Insert/update a customer defined secret in the deployment
 */
export const DeploymentsSecretsCreate = ({
  id,
  secret,
  ...props
}: DeploymentsSecretsCreateProps) => (
  <Mutate<void, unknown, void, string, DeploymentsSecretsCreatePathParams>
    verb="POST"
    path={`/api/deployments/${id}/secrets/${secret}`}
    {...props}
  />
);

export type UseDeploymentsSecretsCreateProps = Omit<
  UseMutateProps<
    void,
    unknown,
    void,
    string,
    DeploymentsSecretsCreatePathParams
  >,
  "path" | "verb"
> &
  DeploymentsSecretsCreatePathParams;

/**
 * Insert/update a customer defined secret in the deployment
 */
export const useDeploymentsSecretsCreate = ({
  id,
  secret,
  ...props
}: UseDeploymentsSecretsCreateProps) =>
  useMutate<void, unknown, void, string, DeploymentsSecretsCreatePathParams>(
    "POST",
    (paramsInPath: DeploymentsSecretsCreatePathParams) =>
      `/api/deployments/${paramsInPath.id}/secrets/${paramsInPath.secret}`,
    { pathParams: { id, secret }, ...props }
  );

export interface DeploymentsSecretsDestroyPathParams {
  id: string;
}

export type DeploymentsSecretsDestroyProps = Omit<
  MutateProps<void, unknown, void, string, DeploymentsSecretsDestroyPathParams>,
  "path" | "verb"
> &
  DeploymentsSecretsDestroyPathParams;

/**
 * Delete a customer defined secret from the deployment
 */
export const DeploymentsSecretsDestroy = ({
  id,
  ...props
}: DeploymentsSecretsDestroyProps) => (
  <Mutate<void, unknown, void, string, DeploymentsSecretsDestroyPathParams>
    verb="DELETE"
    path={`/api/deployments/${id}/secrets`}
    {...props}
  />
);

export type UseDeploymentsSecretsDestroyProps = Omit<
  UseMutateProps<
    void,
    unknown,
    void,
    string,
    DeploymentsSecretsDestroyPathParams
  >,
  "path" | "verb"
> &
  DeploymentsSecretsDestroyPathParams;

/**
 * Delete a customer defined secret from the deployment
 */
export const useDeploymentsSecretsDestroy = ({
  id,
  ...props
}: UseDeploymentsSecretsDestroyProps) =>
  useMutate<void, unknown, void, string, DeploymentsSecretsDestroyPathParams>(
    "DELETE",
    (paramsInPath: DeploymentsSecretsDestroyPathParams) =>
      `/api/deployments/${paramsInPath.id}/secrets`,
    { pathParams: { id }, ...props }
  );

export interface DeploymentsTailscaleLogsRetrieveQueryParams {
  previous?: boolean;
}

export interface DeploymentsTailscaleLogsRetrievePathParams {
  id: string;
}

export type DeploymentsTailscaleLogsRetrieveProps = Omit<
  GetProps<
    string,
    unknown,
    DeploymentsTailscaleLogsRetrieveQueryParams,
    DeploymentsTailscaleLogsRetrievePathParams
  >,
  "path"
> &
  DeploymentsTailscaleLogsRetrievePathParams;

/**
 * Retrieve the logs for a Tailscale container.
 */
export const DeploymentsTailscaleLogsRetrieve = ({
  id,
  ...props
}: DeploymentsTailscaleLogsRetrieveProps) => (
  <Get<
    string,
    unknown,
    DeploymentsTailscaleLogsRetrieveQueryParams,
    DeploymentsTailscaleLogsRetrievePathParams
  >
    path={`/api/deployments/${id}/tailscale_logs`}
    {...props}
  />
);

export type UseDeploymentsTailscaleLogsRetrieveProps = Omit<
  UseGetProps<
    string,
    unknown,
    DeploymentsTailscaleLogsRetrieveQueryParams,
    DeploymentsTailscaleLogsRetrievePathParams
  >,
  "path"
> &
  DeploymentsTailscaleLogsRetrievePathParams;

/**
 * Retrieve the logs for a Tailscale container.
 */
export const useDeploymentsTailscaleLogsRetrieve = ({
  id,
  ...props
}: UseDeploymentsTailscaleLogsRetrieveProps) =>
  useGet<
    string,
    unknown,
    DeploymentsTailscaleLogsRetrieveQueryParams,
    DeploymentsTailscaleLogsRetrievePathParams
  >(
    (paramsInPath: DeploymentsTailscaleLogsRetrievePathParams) =>
      `/api/deployments/${paramsInPath.id}/tailscale_logs`,
    { pathParams: { id }, ...props }
  );

export type HealthRetrieveProps = Omit<
  GetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const HealthRetrieve = (props: HealthRetrieveProps) => (
  <Get<void, unknown, void, void> path="/api/health" {...props} />
);

export type UseHealthRetrieveProps = Omit<
  UseGetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const useHealthRetrieve = (props: UseHealthRetrieveProps) =>
  useGet<void, unknown, void, void>(`/api/health`, props);

export type MzVersionsListProps = Omit<
  GetProps<string[], unknown, void, void>,
  "path"
>;

/**
 * List the versions of Materialize known to Materialize Cloud.
 *
 * Versions are listed in order from oldest to newest.
 */
export const MzVersionsList = (props: MzVersionsListProps) => (
  <Get<string[], unknown, void, void> path="/api/mz-versions" {...props} />
);

export type UseMzVersionsListProps = Omit<
  UseGetProps<string[], unknown, void, void>,
  "path"
>;

/**
 * List the versions of Materialize known to Materialize Cloud.
 *
 * Versions are listed in order from oldest to newest.
 */
export const useMzVersionsList = (props: UseMzVersionsListProps) =>
  useGet<string[], unknown, void, void>(`/api/mz-versions`, props);

export interface MzVersionsLatestRetrieveQueryParams {
  track?: string;
}

export type MzVersionsLatestRetrieveProps = Omit<
  GetProps<string, unknown, MzVersionsLatestRetrieveQueryParams, void>,
  "path"
>;

/**
 * Returns the latest version of Materialize.
 */
export const MzVersionsLatestRetrieve = (
  props: MzVersionsLatestRetrieveProps
) => (
  <Get<string, unknown, MzVersionsLatestRetrieveQueryParams, void>
    path="/api/mz-versions/latest"
    {...props}
  />
);

export type UseMzVersionsLatestRetrieveProps = Omit<
  UseGetProps<string, unknown, MzVersionsLatestRetrieveQueryParams, void>,
  "path"
>;

/**
 * Returns the latest version of Materialize.
 */
export const useMzVersionsLatestRetrieve = (
  props: UseMzVersionsLatestRetrieveProps
) =>
  useGet<string, unknown, MzVersionsLatestRetrieveQueryParams, void>(
    `/api/mz-versions/latest`,
    props
  );

export interface OrganizationsRetrievePathParams {
  /**
   * A UUID string identifying this organization.
   */
  id: string;
}

export type OrganizationsRetrieveProps = Omit<
  GetProps<Organization, unknown, void, OrganizationsRetrievePathParams>,
  "path"
> &
  OrganizationsRetrievePathParams;

/**
 * Fetch details about a single organization.
 */
export const OrganizationsRetrieve = ({
  id,
  ...props
}: OrganizationsRetrieveProps) => (
  <Get<Organization, unknown, void, OrganizationsRetrievePathParams>
    path={`/api/organizations/${id}`}
    {...props}
  />
);

export type UseOrganizationsRetrieveProps = Omit<
  UseGetProps<Organization, unknown, void, OrganizationsRetrievePathParams>,
  "path"
> &
  OrganizationsRetrievePathParams;

/**
 * Fetch details about a single organization.
 */
export const useOrganizationsRetrieve = ({
  id,
  ...props
}: UseOrganizationsRetrieveProps) =>
  useGet<Organization, unknown, void, OrganizationsRetrievePathParams>(
    (paramsInPath: OrganizationsRetrievePathParams) =>
      `/api/organizations/${paramsInPath.id}`,
    { pathParams: { id }, ...props }
  );

export interface RegionsListPathParams {
  providerName: string;
}

export type RegionsListProps = Omit<
  GetProps<SupportedCloudRegion[], unknown, void, RegionsListPathParams>,
  "path"
> &
  RegionsListPathParams;

export const RegionsList = ({ providerName, ...props }: RegionsListProps) => (
  <Get<SupportedCloudRegion[], unknown, void, RegionsListPathParams>
    path={`/api/regions/${providerName}`}
    {...props}
  />
);

export type UseRegionsListProps = Omit<
  UseGetProps<SupportedCloudRegion[], unknown, void, RegionsListPathParams>,
  "path"
> &
  RegionsListPathParams;

export const useRegionsList = ({
  providerName,
  ...props
}: UseRegionsListProps) =>
  useGet<SupportedCloudRegion[], unknown, void, RegionsListPathParams>(
    (paramsInPath: RegionsListPathParams) =>
      `/api/regions/${paramsInPath.providerName}`,
    { pathParams: { providerName }, ...props }
  );

export interface SchemaRetrieveResponse {
  [key: string]: any;
}

export interface SchemaRetrieveQueryParams {
  format?: "json" | "yaml";
}

export type SchemaRetrieveProps = Omit<
  GetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const SchemaRetrieve = (props: SchemaRetrieveProps) => (
  <Get<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>
    path="/api/schema"
    {...props}
  />
);

export type UseSchemaRetrieveProps = Omit<
  UseGetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = (props: UseSchemaRetrieveProps) =>
  useGet<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>(
    `/api/schema`,
    props
  );
