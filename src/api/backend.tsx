/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";
export const SPEC_VERSION = "0.1.0";
export type ProviderEnum = "AWS" | "local";

export interface SupportedCloudRegion {
  provider: ProviderEnum;
  region: string;
  regionControllerUrl: string;
}

export type CloudProvidersListProps = Omit<
  GetProps<SupportedCloudRegion[], unknown, void, void>,
  "path"
>;

/**
 * List the cloud provider and regions
 */
export const CloudProvidersList = (props: CloudProvidersListProps) => (
  <Get<SupportedCloudRegion[], unknown, void, void>
    path="/api/cloud-providers"
    {...props}
  />
);

export type UseCloudProvidersListProps = Omit<
  UseGetProps<SupportedCloudRegion[], unknown, void, void>,
  "path"
>;

/**
 * List the cloud provider and regions
 */
export const useCloudProvidersList = (props: UseCloudProvidersListProps) =>
  useGet<SupportedCloudRegion[], unknown, void, void>(
    `/api/cloud-providers`,
    props
  );

export type HealthRetrieveProps = Omit<
  GetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const HealthRetrieve = (props: HealthRetrieveProps) => (
  <Get<void, unknown, void, void> path="/api/health" {...props} />
);

export type UseHealthRetrieveProps = Omit<
  UseGetProps<void, unknown, void, void>,
  "path"
>;

/**
 * Basic health check endpoint.
 *
 * This endpoint always returns 200 OK. It is intended for use by load
 * balancers and such that need a basic indication as to whether the server is
 * live.
 */
export const useHealthRetrieve = (props: UseHealthRetrieveProps) =>
  useGet<void, unknown, void, void>(`/api/health`, props);

export interface RegionsListPathParams {
  providerName: string;
}

export type RegionsListProps = Omit<
  GetProps<SupportedCloudRegion[], unknown, void, RegionsListPathParams>,
  "path"
> &
  RegionsListPathParams;

export const RegionsList = ({ providerName, ...props }: RegionsListProps) => (
  <Get<SupportedCloudRegion[], unknown, void, RegionsListPathParams>
    path={`/api/regions/${providerName}`}
    {...props}
  />
);

export type UseRegionsListProps = Omit<
  UseGetProps<SupportedCloudRegion[], unknown, void, RegionsListPathParams>,
  "path"
> &
  RegionsListPathParams;

export const useRegionsList = ({
  providerName,
  ...props
}: UseRegionsListProps) =>
  useGet<SupportedCloudRegion[], unknown, void, RegionsListPathParams>(
    (paramsInPath: RegionsListPathParams) =>
      `/api/regions/${paramsInPath.providerName}`,
    { pathParams: { providerName }, ...props }
  );

export interface SchemaRetrieveResponse {
  [key: string]: any;
}

export interface SchemaRetrieveQueryParams {
  format?: "json" | "yaml";
}

export type SchemaRetrieveProps = Omit<
  GetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const SchemaRetrieve = (props: SchemaRetrieveProps) => (
  <Get<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>
    path="/api/schema"
    {...props}
  />
);

export type UseSchemaRetrieveProps = Omit<
  UseGetProps<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>,
  "path"
>;

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = (props: UseSchemaRetrieveProps) =>
  useGet<SchemaRetrieveResponse, unknown, SchemaRetrieveQueryParams, void>(
    `/api/schema`,
    props
  );
